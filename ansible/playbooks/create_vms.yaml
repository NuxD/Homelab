---
# Playbook to create VMs with cloud-init on remote Libvirt host 'z2g5'
- name: Create k3s cluster VMs on remote Libvirt host
  hosts: z2g5
  become: true
  gather_facts: false

  vars:
    vm_image_url: "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
    vm_image_path: "/var/lib/libvirt/images/ubuntu-22.04-cloudimg.qcow2"
    ssh_public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILewGSPw6a9tlTNeclwdef59ff08CGRSfZhllPFhWYu0 danielawuks@gmail.com"
    vms:
      - name: k3s-master
        memory: 4096
        vcpus: 2
        disk_size: 20G
      - name: k3s-worker1
        memory: 4096
        vcpus: 2
        disk_size: 20G
      - name: k3s-worker2
        memory: 4096
        vcpus: 2
        disk_size: 20G

  tasks:
    - name: Remove existing VM disk images
      file:
        path: "/var/lib/libvirt/images/{{ item.name }}.qcow2"
        state: absent
      loop: "{{ vms }}"
    - name: Ensure mkisofs (genisoimage) is installed
      package:
        name: genisoimage
        state: present
    - name: Check if Ubuntu cloud image already exists
      stat:
        path: "{{ vm_image_path }}"
      register: image_stat

    - name: Download Ubuntu cloud image on remote host
      get_url:
        url: "{{ vm_image_url }}"
        dest: "{{ vm_image_path }}"
        mode: '0644'
      when: not image_stat.stat.exists

    - name: Create cloud-init config directory for each VM on remote host
      file:
        path: "/tmp/{{ item.name }}"
        state: directory
        mode: '0700'
      loop: "{{ vms }}"

    - name: Write user-data file for cloud-init on remote host
      copy:
        dest: "/tmp/{{ item.name }}/user-data"
        content: |
          #cloud-config
          hostname: {{ item.name }}
          users:
            - name: ubuntu
              ssh-authorized-keys:
                - "{{ ssh_public_key }}"
              sudo: ['ALL=(ALL) NOPASSWD:ALL']
              shell: /bin/bash
      loop: "{{ vms }}"

    - name: Write empty meta-data file for cloud-init on remote host
      copy:
        dest: "/tmp/{{ item.name }}/meta-data"
        content: ""
      loop: "{{ vms }}"

    - name: Create cloud-init ISO for each VM on remote host
      command: >
        mkisofs -output /var/lib/libvirt/images/{{ item.name }}-seed.iso
        -volid cidata -joliet -rock user-data meta-data
      args:
        chdir: "/tmp/{{ item.name }}"
      loop: "{{ vms }}"

    - name: Create VM disk image on remote host
      command: >
        qemu-img create -f qcow2 -F qcow2 -b {{ vm_image_path }}
        /var/lib/libvirt/images/{{ item.name }}.qcow2
        {{ item.disk_size }}
      args:
        creates: "/var/lib/libvirt/images/{{ item.name }}.qcow2"
      loop: "{{ vms }}"

    - name: Create and start VM with virt-install
      shell: >
        virt-install
        --name {{ item.name }}
        --memory {{ item.memory }}
        --vcpus {{ item.vcpus }}
        --disk path=/var/lib/libvirt/images/{{ item.name }}.qcow2,bus=virtio
        --disk path=/var/lib/libvirt/images/{{ item.name }}-seed.iso,device=cdrom
        --os-variant ubuntu22.04
        --network bridge=virbr0,model=virtio
        --graphics none
        --console pty,target_type=serial
        --import
        --noautoconsole --wait=0
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.name }}"
      register: virt_result

    - name: Show virt-install output
      debug:
        var: virt_result.results